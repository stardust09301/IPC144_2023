///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  : Jenna Moon
Student ID#: 134957224

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

Record your answer(s) to the reflection question(s) in the provided “reflect.txt” text file
1. With the completion of this workshop, you must have begun to appreciate why code formatting is important. 
Explain how you made your code – especially the iteration and selection logic parts – easy to read and maintain.

	Not having paired curly braces for interations is easily overlooked and mistaken. 
I made mistakes while writing the code, tracked down what braces are missing, and had to rewrite it.
One thing helped me was I wrote the curly braces with separate lines to see which braces match each other. 
Proper indentation and properly namedvariables also increase readability. 

2. Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest 
impact on how this workshop could be coded if nesting were not possible.
	
	The entire code is a big do-while loop and this helps with asking questions if users want to keep doing the groceries. 
I use keepPicking iterator variable. As long as keepPicking is not equal to 0, the user will keep inputting pickedNumber. 
By putting keepGoing = 1 in statement with every condition except for the one where we actually pick the right number,
the loop will continue. I used nested separate logic for each fruit in big one loop. The big outer loop has a variable named
"outerCount" and that helped with decisions where users can answer 1(yes) or 0(no). If the user answers 1, which is outerCount=1,
we keep the loop going. If the user answers 0, the outerCount=0, the loop will be terminated. enclosing one logic construct within anbother
is called nesting.

3. Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 
5, and for each value within that range, you had to perform something unique. You would have to apply 
selection to validate the entered values so you can implement the given logic for a specific entered range value. 
Explain why is it inefficient to achieve this using a series of “if” optional path constructs instead of the preferred 
“if/else if…” alternative path logic?

	 I woud use "printf", "scanf", and "switch" statement since there are 5 different cases that user can input different values.
 "Switch" statement is a lot simpler than "if/else" statement, and it indicates that something unique will be performed for that value. 
Different logic can be written and executed for each case. If I want to execute something differentfor each value, using "switch" will
increase readability and manageability. The "if/else" statement will be very redundant and inefficient since you have to repeat the 
same code a lot. It will be more confusing for people who write the code and who have to fix and maintain the code. 
