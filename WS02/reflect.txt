///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Jenna Moon
Student ID#: 134957224
Email      : jmoon32@myseneca.ca
Section    : NCC

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Given the following C statements:

float price1 = 17.96f, price3 = 17.98f;
double price2 = 17.96, price4 = 17.98;
printf("1. 17.96 = %f (as cents:%d)\n", price1, (int)(price1 * 100));
printf("2. 17.96 = %lf (as cents:%d)\n", price2, (int)(price2 * 100));
printf("3. 17.98 = %f (as cents:%d)\n", price3, (int)(price3 * 100));
printf("4. 17.98 = %lf (as cents:%d)\n", price4, (int)(price4 * 100));

Execute the above sample code on your machine. Briefly explain why price1 and the corresponding converted 
cent value does not properly represent the intended value. Why do you think all the other samples work as 
expected?
 	
	The'price1' and 'price3' are declared as'float'variables.The'price2' and 'price4' are declared as 'double'.
The '%f' is for 'float' values with single floating point while '%lf' values are 'double'. The sample code given
shows the calculation of converting the money to cents. By using casting, the conversion to cents of 'price1' 
will become integer value. The'price2' is 'double' value, so it prints as 17.960000; however, after conversion to cents
with integer value, '1796.0000' will be printed as '1796'. The'price3' is also 'float' value, so it is 17.980000. 
But after casting to an integer, the value is printed out as '1798' as cents. The Price4 is %lf and 'double' value. 
So it will be print out as '17.980000'. The int value of that is also 1798. 

2. Execute the below code on your machine:

int money = 7245;
printf("1. $%.2lf\n", money / 100.0);
printf("2. $%.2lf\n", money / (double)100);
printf("3. $%.2lf\n", (double)money / 100);
Explain why these three examples work as intended. Apply terms like cast, promotion, coercion, implicit, and 
explicit in your answer.

	All the printf statements above has format specifier, '%.2lf', and it prints out numbers with two decimal places.
In the first printf statement, the statement is using coercion,implicit type conversion by using floating-point number for division. 
By dividing by 100.0, the integer, 7245 will result in 72.45.
In the second statement, money is divided by (double)100. The '(double)100' expression is casting, explicit conversion.
It converts integer,100 to a double value which also results in 72.45. 
In the third printf statement, (double)money is divided by 100. 
This casting is also an explicit conversion from an integer value which was declared at the beginning, to a double value, 


3. Execute the following code on your machine:

int result, money = 7245;
result = money / 100;
printf("1. $%.2lf\n", money / 100);
printf("2. $%d\n", money / 100);
printf("3. $%.2lf\n", result);
printf("4. $%d\n", result);

Apply terms like cast, promotion, truncation, coercion, implicit, and explicit in answering the following 
questions.

a) What is the value of the variable result? Explain why. 
	Both money and result are declared as integer variables. The variable result is money divided by 100. 
Since result is integer value, only the integer value from division of 7245/100 will be displayed,and the decimal parts
will be removed from truncation. So the result should be '72.'

b) What values are displayed for samples 1, 2, 3, and 4?
	1. $0.00
	2. $72
	3. $0.00
	4. $72
c) What can you conclude about the printf function that causes samples 1 and 3 not to work as expected?
	Since both result and money are integer variables, using '%.2lf' specifier in the first and third printf statements 
was not correct for sample 1 and 3. The '%2lf' specifier results in numbers with two decimal places, which conflicts with the integer, 'result' variable.
The sample 2 and 4 print out correctly since only those printf statements were using '%d', which is for an integer.
In this case,'%d'should be used in all the printf statements due to the integer data type. When we declare variables, printf function also should use the
proper format specifier to match with the correct data types accordingly. 
